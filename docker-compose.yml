version: '3.9'
services:

  api:
    container_name: api_movie
    build:
      context: .    # весь текущий каталог отправить в образ докер
      dockerfile: ./Dockerfile
    restart: always
    env_file:
      - .env
    command: npm run start:dev api --prefix /usr/src/server
    networks:
      - network_movie

  auth:
    container_name: auth_movie
    build:
      context: .
      dockerfile: ./apps/auth/Dockerfile
    restart: always
    env_file:
      - .env
    command: npm run start:dev auth --prefix /usr/src/server
    networks:
      - network_movie

  media:
    container_name: media_movie
    build:
      context: .
      dockerfile: ./apps/media/Dockerfile
    restart: always
    env_file:
      - .env
    command: npm run start:dev media --prefix /usr/src/server
    networks:
      - network_movie

  movie:
    container_name: movie_movie
    build:
      context: .
      dockerfile: ./apps/movie/Dockerfile
    restart: always
    ports:
      - '3003:3003'
    env_file:
      - .env
    command: npm run start:dev movie --prefix /usr/src/server
    networks:
      - network_movie

  person:
    container_name: person_movie
    build:
      context: .
      dockerfile: ./apps/person/Dockerfile
    restart: always
    env_file:
      - .env
    command: npm run start:dev person --prefix /usr/src/server
    networks:
      - network_movie

  profile:
    container_name: profile_movie
    build:
      context: .
      dockerfile: ./apps/profile/Dockerfile
    restart: always
    ports:
      - '3001:3001'
    env_file:
      - .env
    command: npm run start:dev profile --prefix /usr/src/server
    networks:
      - network_movie

  postgres:
    container_name: postgres_movie
    image: postgres:15.2
    restart: always
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    networks:
      - network_movie

  rabbitmq:
    container_name: rabbitmq_movie
    image: rabbitmq:3.11-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - network_movie

  redis:
    container_name: redis_movie
    image: redis:7.2-rc1
    command: redis-server --requirepass redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/var/lib/redis
    networks:
      - network_movie

  krakend:
    container_name: krakend_movie
    image: devopsfaith/krakend:2
    ports:
      - '80:80'
    environment:
      - FC_ENABLE=1
      - FC_TEMPLATES=/etc/krakend/templates
      - FC_SETTINGS=/etc/krakend/settings
      - FC_PARTIALS=/etc/krakend/partials
      - FC_OUT=krakend.yml
    volumes:
      - ./krakend:/etc/krakend
    command: /bin/sh -c "krakend run -c /etc/krakend/krakend.tmpl"
    networks:
      - network_movie

volumes:
  pg_data:
  rabbit_data:
  redis_data:

networks:
  network_movie:
    name: network_movie
